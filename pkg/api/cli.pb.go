// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cli.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	cli.proto
	manager.proto

It has these top-level messages:
	EmptyMessage
	StatusResponse
	NodesResponse
	Task
	Command
	Node
	StateRequest
	StateResponse
	NextExecutionRequest
	NextExecutionResponse
	ReportExecutionRequest
	ReportExecutionResponse
	ClusterNode
	HostAnnotation
	NodeMetric
	ExecutionCommand
	ExecutionResult
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusResponse struct {
	Health int64   `protobuf:"varint,1,opt,name=health" json:"health,omitempty"`
	State  int64   `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	Tasks  []*Task `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusResponse) GetHealth() int64 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *StatusResponse) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *StatusResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type NodesResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodesResponse) Reset()                    { *m = NodesResponse{} }
func (m *NodesResponse) String() string            { return proto.CompactTextString(m) }
func (*NodesResponse) ProtoMessage()               {}
func (*NodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodesResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Task struct {
	Id       int64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status   int64      `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Type     int64      `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Commands []*Command `protobuf:"bytes,4,rep,name=commands" json:"commands,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Task) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Task) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type Command struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status       int64  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Type         int64  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	NodeID       string `protobuf:"bytes,4,opt,name=nodeID" json:"nodeID,omitempty"`
	Retries      int64  `protobuf:"varint,5,opt,name=retries" json:"retries,omitempty"`
	Dependencies int64  `protobuf:"varint,6,opt,name=dependencies" json:"dependencies,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Command) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Command) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Command) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Command) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Command) GetRetries() int64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Command) GetDependencies() int64 {
	if m != nil {
		return m.Dependencies
	}
	return 0
}

type Node struct {
	Id              string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Addr            string   `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	IsEmpty         bool     `protobuf:"varint,3,opt,name=isEmpty" json:"isEmpty,omitempty"`
	Nodes           []string `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`
	HostAnnotations []string `protobuf:"bytes,5,rep,name=hostAnnotations" json:"hostAnnotations,omitempty"`
	Online          bool     `protobuf:"varint,6,opt,name=online" json:"online,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Node) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

func (m *Node) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Node) GetHostAnnotations() []string {
	if m != nil {
		return m.HostAnnotations
	}
	return nil
}

func (m *Node) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "api.EmptyMessage")
	proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
	proto.RegisterType((*NodesResponse)(nil), "api.NodesResponse")
	proto.RegisterType((*Task)(nil), "api.Task")
	proto.RegisterType((*Command)(nil), "api.Command")
	proto.RegisterType((*Node)(nil), "api.Node")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CLI service

type CLIClient interface {
	Status(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	Nodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodesResponse, error)
}

type cLIClient struct {
	cc *grpc.ClientConn
}

func NewCLIClient(cc *grpc.ClientConn) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) Status(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/api.CLI/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) Nodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodesResponse, error) {
	out := new(NodesResponse)
	err := grpc.Invoke(ctx, "/api.CLI/Nodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CLI service

type CLIServer interface {
	Status(context.Context, *EmptyMessage) (*StatusResponse, error)
	Nodes(context.Context, *EmptyMessage) (*NodesResponse, error)
}

func RegisterCLIServer(s *grpc.Server, srv CLIServer) {
	s.RegisterService(&_CLI_serviceDesc, srv)
}

func _CLI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CLI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Status(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CLI/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).Nodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CLI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _CLI_Status_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _CLI_Nodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli.proto",
}

func init() { proto.RegisterFile("cli.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0xae, 0xd3, 0x30,
	0x10, 0x85, 0x49, 0xf3, 0x73, 0x9b, 0xa1, 0x14, 0x31, 0xa0, 0xca, 0x62, 0xd3, 0xca, 0xab, 0xac,
	0xaa, 0xaa, 0x3c, 0x01, 0x2a, 0x2c, 0x2a, 0x01, 0x0b, 0xc3, 0x1e, 0x99, 0xda, 0xa2, 0x56, 0x53,
	0x3b, 0x8a, 0xcd, 0xa2, 0xcf, 0x02, 0x0f, 0x8b, 0x3c, 0x71, 0x4b, 0x0a, 0x6c, 0xee, 0x2e, 0xe7,
	0x8c, 0xc7, 0xf3, 0x65, 0x7c, 0xa0, 0x3e, 0xb4, 0x66, 0xdd, 0xf5, 0x2e, 0x38, 0xcc, 0x65, 0x67,
	0xf8, 0x1c, 0x66, 0xef, 0xcf, 0x5d, 0xb8, 0x7c, 0xd4, 0xde, 0xcb, 0xef, 0x9a, 0x7f, 0x85, 0xf9,
	0xe7, 0x20, 0xc3, 0x0f, 0x2f, 0xb4, 0xef, 0x9c, 0xf5, 0x1a, 0x17, 0x50, 0x1d, 0xb5, 0x6c, 0xc3,
	0x91, 0x65, 0xab, 0xac, 0xc9, 0x45, 0x52, 0xf8, 0x0a, 0x4a, 0x1f, 0x64, 0xd0, 0x6c, 0x42, 0xf6,
	0x20, 0x70, 0x09, 0x65, 0x90, 0xfe, 0xe4, 0x59, 0xbe, 0xca, 0x9b, 0xa7, 0xdb, 0x7a, 0x2d, 0x3b,
	0xb3, 0xfe, 0x22, 0xfd, 0x49, 0x0c, 0x3e, 0xdf, 0xc0, 0xb3, 0x4f, 0x4e, 0xe9, 0x3f, 0xf7, 0x2f,
	0xa1, 0xb4, 0xd1, 0x60, 0xd9, 0xa8, 0x23, 0x1e, 0x11, 0x83, 0xcf, 0x5b, 0x28, 0xe2, 0x05, 0x38,
	0x87, 0x89, 0x51, 0x09, 0x62, 0x62, 0x54, 0x04, 0xf3, 0x84, 0x9a, 0x08, 0x92, 0x42, 0x84, 0x22,
	0x5c, 0x3a, 0xcd, 0x72, 0x72, 0xe9, 0x1b, 0x1b, 0x98, 0x1e, 0xdc, 0xf9, 0x2c, 0xad, 0xf2, 0xac,
	0xa0, 0x39, 0x33, 0x9a, 0xb3, 0x1b, 0x4c, 0x71, 0xab, 0xf2, 0x9f, 0x19, 0x3c, 0x24, 0x77, 0x34,
	0xb1, 0x7e, 0xf4, 0xc4, 0x05, 0x54, 0x11, 0x7f, 0xff, 0x8e, 0x15, 0xd4, 0x9f, 0x14, 0x32, 0x78,
	0xe8, 0x75, 0xe8, 0x8d, 0xf6, 0xac, 0xa4, 0xe3, 0x57, 0x89, 0x1c, 0x66, 0x4a, 0x77, 0xda, 0x2a,
	0x6d, 0x0f, 0xb1, 0x5c, 0x51, 0xf9, 0xce, 0xe3, 0xbf, 0x32, 0x28, 0xe2, 0x6e, 0xfe, 0x41, 0x43,
	0x28, 0xa4, 0x52, 0x3d, 0x81, 0xd5, 0x82, 0xbe, 0xe3, 0x28, 0xe3, 0xe9, 0x75, 0x89, 0x6c, 0x2a,
	0xae, 0x32, 0xbe, 0xdd, 0xb0, 0xf3, 0xb8, 0x8b, 0x3a, 0x2d, 0x1a, 0x1b, 0x78, 0x7e, 0x74, 0x3e,
	0xbc, 0xb5, 0xd6, 0x05, 0x19, 0x8c, 0xb3, 0x11, 0x31, 0xd6, 0xff, 0xb6, 0xe3, 0xcf, 0x39, 0xdb,
	0x1a, 0xab, 0x09, 0x72, 0x2a, 0x92, 0xda, 0x9e, 0x20, 0xdf, 0x7d, 0xd8, 0xe3, 0x16, 0xaa, 0x21,
	0x44, 0xf8, 0x82, 0xb6, 0x3c, 0x4e, 0xd8, 0xeb, 0x97, 0x64, 0xdd, 0x87, 0x8c, 0x3f, 0xc1, 0x0d,
	0x94, 0x94, 0x8b, 0xff, 0xb5, 0xe0, 0x2d, 0x13, 0xa3, 0x8e, 0x6f, 0x15, 0xc5, 0xf8, 0xcd, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x79, 0xb5, 0x7a, 0xd3, 0x02, 0x00, 0x00,
}
