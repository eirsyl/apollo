// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manager.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StateRequest struct {
	IsEmpty         bool              `protobuf:"varint,1,opt,name=isEmpty" json:"isEmpty,omitempty"`
	Nodes           []*ClusterNode    `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	HostAnnotations []*HostAnnotation `protobuf:"bytes,3,rep,name=hostAnnotations" json:"hostAnnotations,omitempty"`
	Metrics         []*NodeMetric     `protobuf:"bytes,4,rep,name=metrics" json:"metrics,omitempty"`
	Addr            string            `protobuf:"bytes,5,opt,name=addr" json:"addr,omitempty"`
}

func (m *StateRequest) Reset()                    { *m = StateRequest{} }
func (m *StateRequest) String() string            { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()               {}
func (*StateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *StateRequest) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

func (m *StateRequest) GetNodes() []*ClusterNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *StateRequest) GetHostAnnotations() []*HostAnnotation {
	if m != nil {
		return m.HostAnnotations
	}
	return nil
}

func (m *StateRequest) GetMetrics() []*NodeMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *StateRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type StateResponse struct {
}

func (m *StateResponse) Reset()                    { *m = StateResponse{} }
func (m *StateResponse) String() string            { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()               {}
func (*StateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type NextExecutionRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=nodeID" json:"nodeID,omitempty"`
}

func (m *NextExecutionRequest) Reset()                    { *m = NextExecutionRequest{} }
func (m *NextExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*NextExecutionRequest) ProtoMessage()               {}
func (*NextExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *NextExecutionRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type NextExecutionResponse struct {
	Commands []*ExecutionCommand `protobuf:"bytes,1,rep,name=commands" json:"commands,omitempty"`
}

func (m *NextExecutionResponse) Reset()                    { *m = NextExecutionResponse{} }
func (m *NextExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*NextExecutionResponse) ProtoMessage()               {}
func (*NextExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *NextExecutionResponse) GetCommands() []*ExecutionCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

type ReportExecutionRequest struct {
	NodeID         string             `protobuf:"bytes,1,opt,name=nodeID" json:"nodeID,omitempty"`
	CommandResults []*ExecutionResult `protobuf:"bytes,2,rep,name=commandResults" json:"commandResults,omitempty"`
}

func (m *ReportExecutionRequest) Reset()                    { *m = ReportExecutionRequest{} }
func (m *ReportExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportExecutionRequest) ProtoMessage()               {}
func (*ReportExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ReportExecutionRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ReportExecutionRequest) GetCommandResults() []*ExecutionResult {
	if m != nil {
		return m.CommandResults
	}
	return nil
}

type ReportExecutionResponse struct {
}

func (m *ReportExecutionResponse) Reset()                    { *m = ReportExecutionResponse{} }
func (m *ReportExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportExecutionResponse) ProtoMessage()               {}
func (*ReportExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

// *
// TYPES
type ClusterNode struct {
	NodeID      string   `protobuf:"bytes,1,opt,name=nodeID" json:"nodeID,omitempty"`
	Addr        string   `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Flags       string   `protobuf:"bytes,3,opt,name=flags" json:"flags,omitempty"`
	Role        string   `protobuf:"bytes,4,opt,name=role" json:"role,omitempty"`
	Myself      bool     `protobuf:"varint,5,opt,name=myself" json:"myself,omitempty"`
	MasterID    string   `protobuf:"bytes,6,opt,name=masterID" json:"masterID,omitempty"`
	PingSent    int64    `protobuf:"varint,7,opt,name=pingSent" json:"pingSent,omitempty"`
	PingRecv    int64    `protobuf:"varint,8,opt,name=pingRecv" json:"pingRecv,omitempty"`
	ConfigEpoch int64    `protobuf:"varint,9,opt,name=configEpoch" json:"configEpoch,omitempty"`
	LinkStatus  string   `protobuf:"bytes,10,opt,name=linkStatus" json:"linkStatus,omitempty"`
	Slots       []string `protobuf:"bytes,11,rep,name=slots" json:"slots,omitempty"`
}

func (m *ClusterNode) Reset()                    { *m = ClusterNode{} }
func (m *ClusterNode) String() string            { return proto.CompactTextString(m) }
func (*ClusterNode) ProtoMessage()               {}
func (*ClusterNode) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ClusterNode) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ClusterNode) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ClusterNode) GetFlags() string {
	if m != nil {
		return m.Flags
	}
	return ""
}

func (m *ClusterNode) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *ClusterNode) GetMyself() bool {
	if m != nil {
		return m.Myself
	}
	return false
}

func (m *ClusterNode) GetMasterID() string {
	if m != nil {
		return m.MasterID
	}
	return ""
}

func (m *ClusterNode) GetPingSent() int64 {
	if m != nil {
		return m.PingSent
	}
	return 0
}

func (m *ClusterNode) GetPingRecv() int64 {
	if m != nil {
		return m.PingRecv
	}
	return 0
}

func (m *ClusterNode) GetConfigEpoch() int64 {
	if m != nil {
		return m.ConfigEpoch
	}
	return 0
}

func (m *ClusterNode) GetLinkStatus() string {
	if m != nil {
		return m.LinkStatus
	}
	return ""
}

func (m *ClusterNode) GetSlots() []string {
	if m != nil {
		return m.Slots
	}
	return nil
}

type HostAnnotation struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HostAnnotation) Reset()                    { *m = HostAnnotation{} }
func (m *HostAnnotation) String() string            { return proto.CompactTextString(m) }
func (*HostAnnotation) ProtoMessage()               {}
func (*HostAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *HostAnnotation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HostAnnotation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NodeMetric struct {
	Name  string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *NodeMetric) Reset()                    { *m = NodeMetric{} }
func (m *NodeMetric) String() string            { return proto.CompactTextString(m) }
func (*NodeMetric) ProtoMessage()               {}
func (*NodeMetric) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *NodeMetric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeMetric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ExecutionCommand struct {
	Id        string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Command   int64    `protobuf:"varint,2,opt,name=command" json:"command,omitempty"`
	Arguments []string `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
}

func (m *ExecutionCommand) Reset()                    { *m = ExecutionCommand{} }
func (m *ExecutionCommand) String() string            { return proto.CompactTextString(m) }
func (*ExecutionCommand) ProtoMessage()               {}
func (*ExecutionCommand) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ExecutionCommand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExecutionCommand) GetCommand() int64 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *ExecutionCommand) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type ExecutionResult struct {
	Id      string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Result  []string `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
	Success bool     `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *ExecutionResult) Reset()                    { *m = ExecutionResult{} }
func (m *ExecutionResult) String() string            { return proto.CompactTextString(m) }
func (*ExecutionResult) ProtoMessage()               {}
func (*ExecutionResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ExecutionResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExecutionResult) GetResult() []string {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ExecutionResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*StateRequest)(nil), "api.StateRequest")
	proto.RegisterType((*StateResponse)(nil), "api.StateResponse")
	proto.RegisterType((*NextExecutionRequest)(nil), "api.NextExecutionRequest")
	proto.RegisterType((*NextExecutionResponse)(nil), "api.NextExecutionResponse")
	proto.RegisterType((*ReportExecutionRequest)(nil), "api.ReportExecutionRequest")
	proto.RegisterType((*ReportExecutionResponse)(nil), "api.ReportExecutionResponse")
	proto.RegisterType((*ClusterNode)(nil), "api.ClusterNode")
	proto.RegisterType((*HostAnnotation)(nil), "api.HostAnnotation")
	proto.RegisterType((*NodeMetric)(nil), "api.NodeMetric")
	proto.RegisterType((*ExecutionCommand)(nil), "api.ExecutionCommand")
	proto.RegisterType((*ExecutionResult)(nil), "api.ExecutionResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	ReportState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	NextExecution(ctx context.Context, in *NextExecutionRequest, opts ...grpc.CallOption) (*NextExecutionResponse, error)
	ReportExecutionResult(ctx context.Context, in *ReportExecutionRequest, opts ...grpc.CallOption) (*ReportExecutionResponse, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) ReportState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := grpc.Invoke(ctx, "/api.Manager/ReportState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) NextExecution(ctx context.Context, in *NextExecutionRequest, opts ...grpc.CallOption) (*NextExecutionResponse, error) {
	out := new(NextExecutionResponse)
	err := grpc.Invoke(ctx, "/api.Manager/NextExecution", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ReportExecutionResult(ctx context.Context, in *ReportExecutionRequest, opts ...grpc.CallOption) (*ReportExecutionResponse, error) {
	out := new(ReportExecutionResponse)
	err := grpc.Invoke(ctx, "/api.Manager/ReportExecutionResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	ReportState(context.Context, *StateRequest) (*StateResponse, error)
	NextExecution(context.Context, *NextExecutionRequest) (*NextExecutionResponse, error)
	ReportExecutionResult(context.Context, *ReportExecutionRequest) (*ReportExecutionResponse, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_ReportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ReportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/ReportState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ReportState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_NextExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).NextExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/NextExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).NextExecution(ctx, req.(*NextExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ReportExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ReportExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/ReportExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ReportExecutionResult(ctx, req.(*ReportExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportState",
			Handler:    _Manager_ReportState_Handler,
		},
		{
			MethodName: "NextExecution",
			Handler:    _Manager_NextExecution_Handler,
		},
		{
			MethodName: "ReportExecutionResult",
			Handler:    _Manager_ReportExecutionResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x26, 0xcd, 0xd6, 0x26, 0xa7, 0x6c, 0x1d, 0x66, 0x2d, 0x5e, 0x99, 0x50, 0x94, 0x0b, 0x54,
	0x6e, 0x2a, 0x31, 0xa4, 0x5d, 0x20, 0xb8, 0x40, 0x5b, 0xa5, 0x0d, 0x69, 0xbb, 0x70, 0xb9, 0xe2,
	0xce, 0x24, 0x6e, 0x17, 0x91, 0xd8, 0x21, 0x76, 0xa6, 0xed, 0x89, 0x78, 0x1b, 0xde, 0x81, 0x37,
	0x41, 0xfe, 0x49, 0xff, 0x11, 0xdc, 0xf9, 0x3b, 0xdf, 0xf9, 0x7c, 0x7c, 0xfe, 0x0c, 0x07, 0x05,
	0xe5, 0x74, 0xce, 0xaa, 0x71, 0x59, 0x09, 0x25, 0x90, 0x4f, 0xcb, 0x2c, 0xfe, 0xe5, 0xc1, 0xd3,
	0xa9, 0xa2, 0x8a, 0x11, 0xf6, 0xa3, 0x66, 0x52, 0x21, 0x0c, 0x9d, 0x4c, 0x4e, 0x8a, 0x52, 0x3d,
	0x62, 0x2f, 0xf2, 0x46, 0x01, 0x69, 0x20, 0x7a, 0x0d, 0xfb, 0x5c, 0xa4, 0x4c, 0xe2, 0x56, 0xe4,
	0x8f, 0xba, 0x67, 0x47, 0x63, 0x5a, 0x66, 0xe3, 0x8b, 0xbc, 0x96, 0x8a, 0x55, 0xb7, 0x22, 0x65,
	0xc4, 0xd2, 0xe8, 0x23, 0xf4, 0xee, 0x84, 0x54, 0x9f, 0x38, 0x17, 0x8a, 0xaa, 0x4c, 0x70, 0x89,
	0x7d, 0xa3, 0x78, 0x6e, 0x14, 0x57, 0x6b, 0x1c, 0xd9, 0xf4, 0x45, 0x6f, 0xa0, 0x53, 0x30, 0x55,
	0x65, 0x89, 0xc4, 0x7b, 0x46, 0xd6, 0x33, 0x32, 0x1d, 0xe1, 0xc6, 0xd8, 0x49, 0xc3, 0x23, 0x04,
	0x7b, 0x34, 0x4d, 0x2b, 0xbc, 0x1f, 0x79, 0xa3, 0x90, 0x98, 0x73, 0xdc, 0x83, 0x03, 0x97, 0x8f,
	0x2c, 0x05, 0x97, 0x2c, 0x1e, 0xc3, 0xf1, 0x2d, 0x7b, 0x50, 0x93, 0x07, 0x96, 0xd4, 0x26, 0xa2,
	0x4b, 0x74, 0x00, 0x6d, 0xfd, 0xde, 0xeb, 0x4b, 0x93, 0x67, 0x48, 0x1c, 0x8a, 0x3f, 0x43, 0x7f,
	0xc3, 0xdf, 0x5e, 0x84, 0xde, 0x42, 0x90, 0x88, 0xa2, 0xa0, 0x3c, 0x95, 0xd8, 0x33, 0x2f, 0xeb,
	0x9b, 0x97, 0x2d, 0x3c, 0x2f, 0x2c, 0x4b, 0x16, 0x6e, 0x31, 0x87, 0x01, 0x61, 0xa5, 0xa8, 0xfe,
	0x3b, 0x3a, 0xfa, 0x00, 0x87, 0x4e, 0x4d, 0x98, 0xac, 0x73, 0xd5, 0x54, 0xfb, 0x78, 0x3d, 0x94,
	0x25, 0xc9, 0x86, 0x6f, 0x7c, 0x02, 0x2f, 0xb6, 0xe2, 0xb9, 0x32, 0xfc, 0x6c, 0x41, 0x77, 0xa5,
	0x59, 0x7f, 0x7d, 0x40, 0x53, 0xd3, 0xd6, 0xb2, 0xa6, 0xe8, 0x18, 0xf6, 0x67, 0x39, 0x9d, 0xeb,
	0x3e, 0x6a, 0xa3, 0x05, 0xda, 0xb3, 0x12, 0x39, 0xc3, 0x7b, 0xd6, 0x53, 0x9f, 0xf5, 0xad, 0xc5,
	0xa3, 0x64, 0xf9, 0xcc, 0xf4, 0x24, 0x20, 0x0e, 0xa1, 0x21, 0x04, 0x05, 0xd5, 0xb1, 0xaf, 0x2f,
	0x71, 0xdb, 0xf8, 0x2f, 0xb0, 0xe6, 0xca, 0x8c, 0xcf, 0xa7, 0x8c, 0x2b, 0xdc, 0x89, 0xbc, 0x91,
	0x4f, 0x16, 0xb8, 0xe1, 0x08, 0x4b, 0xee, 0x71, 0xb0, 0xe4, 0x34, 0x46, 0x11, 0x74, 0x13, 0xc1,
	0x67, 0xd9, 0x7c, 0x52, 0x8a, 0xe4, 0x0e, 0x87, 0x86, 0x5e, 0x35, 0xa1, 0x57, 0x00, 0x79, 0xc6,
	0xbf, 0xeb, 0x79, 0xa8, 0x25, 0x06, 0x13, 0x77, 0xc5, 0xa2, 0xf3, 0x92, 0xb9, 0x50, 0x12, 0x77,
	0x23, 0x5f, 0xe7, 0x65, 0x40, 0xfc, 0x1e, 0x0e, 0xd7, 0x67, 0x54, 0x67, 0xca, 0x69, 0xc1, 0x5c,
	0xa5, 0xcc, 0x59, 0x6b, 0xef, 0x69, 0x5e, 0x33, 0x57, 0x28, 0x0b, 0xe2, 0x73, 0x80, 0xe5, 0xa0,
	0xfe, 0x5b, 0xe7, 0x35, 0xba, 0xaf, 0x70, 0xb4, 0x39, 0x46, 0xe8, 0x10, 0x5a, 0x59, 0xea, 0xb4,
	0xad, 0x2c, 0xd5, 0x9b, 0xe9, 0xda, 0x6d, 0xb4, 0x3e, 0x69, 0x20, 0x3a, 0x85, 0x90, 0x56, 0xf3,
	0xba, 0x60, 0x5c, 0xd9, 0x5d, 0x0b, 0xc9, 0xd2, 0x10, 0x4f, 0xa1, 0xb7, 0x31, 0x37, 0x5b, 0x57,
	0x0f, 0xa0, 0x5d, 0x19, 0xc6, 0x4c, 0x5b, 0x48, 0x1c, 0xd2, 0x21, 0x65, 0x9d, 0x24, 0x4c, 0xda,
	0xd6, 0x07, 0xa4, 0x81, 0x67, 0xbf, 0x3d, 0xe8, 0xdc, 0xd8, 0xef, 0x04, 0x9d, 0x43, 0xd7, 0x4e,
	0x9d, 0x59, 0x3c, 0xf4, 0xcc, 0x8c, 0xea, 0xea, 0xa7, 0x32, 0x44, 0xab, 0x26, 0x37, 0x90, 0x4f,
	0xd0, 0x15, 0x1c, 0xac, 0x6d, 0x1a, 0x3a, 0xb1, 0x9b, 0xbe, 0x63, 0x5b, 0x87, 0xc3, 0x5d, 0xd4,
	0xe2, 0xa6, 0x2f, 0xd0, 0xdf, 0x9e, 0x7b, 0x9d, 0xc0, 0x4b, 0x23, 0xdb, 0xbd, 0x83, 0xc3, 0xd3,
	0xdd, 0x64, 0x73, 0xeb, 0xb7, 0xb6, 0xf9, 0x27, 0xdf, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0x4a, 0x68, 0xd8, 0x38, 0x05, 0x00, 0x00,
}
