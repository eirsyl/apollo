// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manager.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HealthRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=nodeId" json:"nodeId,omitempty"`
	Ready  bool   `protobuf:"varint,2,opt,name=ready" json:"ready,omitempty"`
	Detail string `protobuf:"bytes,3,opt,name=detail" json:"detail,omitempty"`
}

func (m *HealthRequest) Reset()                    { *m = HealthRequest{} }
func (m *HealthRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()               {}
func (*HealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HealthRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HealthRequest) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *HealthRequest) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type HealthResponse struct {
	Ack bool `protobuf:"varint,1,opt,name=ack" json:"ack,omitempty"`
}

func (m *HealthResponse) Reset()                    { *m = HealthResponse{} }
func (m *HealthResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()               {}
func (*HealthResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HealthResponse) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func init() {
	proto.RegisterType((*HealthRequest)(nil), "api.HealthRequest")
	proto.RegisterType((*HealthResponse)(nil), "api.HealthResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	AgentHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) AgentHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := grpc.Invoke(ctx, "/api.Manager/AgentHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	AgentHealth(context.Context, *HealthRequest) (*HealthResponse, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_AgentHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AgentHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/AgentHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AgentHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentHealth",
			Handler:    _Manager_AgentHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0xcc, 0x4b,
	0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x0a,
	0xe5, 0xe2, 0xf5, 0x48, 0x4d, 0xcc, 0x29, 0xc9, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x12, 0xe3, 0x62, 0xcb, 0xcb, 0x4f, 0x49, 0xf5, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x82, 0xf2, 0x84, 0x44, 0xb8, 0x58, 0x8b, 0x52, 0x13, 0x53, 0x2a, 0x25, 0x98, 0x14, 0x18, 0x35,
	0x38, 0x82, 0x20, 0x1c, 0x90, 0xea, 0x94, 0xd4, 0x92, 0xc4, 0xcc, 0x1c, 0x09, 0x66, 0x88, 0x6a,
	0x08, 0x4f, 0x49, 0x89, 0x8b, 0x0f, 0x66, 0x6c, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x00,
	0x17, 0x73, 0x62, 0x72, 0x36, 0xd8, 0x50, 0x8e, 0x20, 0x10, 0xd3, 0xc8, 0x99, 0x8b, 0xdd, 0x17,
	0xe2, 0x20, 0x21, 0x0b, 0x2e, 0x6e, 0xc7, 0xf4, 0xd4, 0xbc, 0x12, 0x88, 0x1e, 0x21, 0x21, 0xbd,
	0xc4, 0x82, 0x4c, 0x3d, 0x14, 0x77, 0x49, 0x09, 0xa3, 0x88, 0x41, 0x0c, 0x55, 0x62, 0x48, 0x62,
	0x03, 0xfb, 0xc5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x1d, 0x09, 0xf5, 0xdc, 0x00, 0x00,
	0x00,
}
